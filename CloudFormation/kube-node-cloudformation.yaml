AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template untuk membuat EKS cluster dengan nama kube-node'

Parameters:
  ClusterName:
    Type: String
    Default: kube-node
    Description: Nama untuk cluster EKS

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR untuk VPC

  Subnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR untuk Subnet 1

  Subnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR untuk Subnet 2

  NodeInstanceType:
    Type: String
    Default: t3.medium
    Description: Jenis instance untuk node

  NodeDesiredCapacity:
    Type: Number
    Default: 2
    Description: Jumlah node yang diinginkan

  NodeMaxSize:
    Type: Number
    Default: 3
    Description: Jumlah maksimum node

  NodeMinSize:
    Type: Number
    Default: 1
    Description: Jumlah minimum node

Resources:
  # VPC Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-igw'

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnet Resources
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-subnet-1'
        - Key: 'kubernetes.io/cluster/${ClusterName}'
          Value: 'shared'
        - Key: 'kubernetes.io/role/elb'
          Value: '1'

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-subnet-2'
        - Key: 'kubernetes.io/cluster/${ClusterName}'
          Value: 'shared'
        - Key: 'kubernetes.io/role/elb'
          Value: '1'

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-public-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable

  # IAM Resources
  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'

  # Security Groups
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-sg'

  ClusterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt ClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
    DependsOn:
      - ClusterRole
      - VPCGatewayAttachment

  # EKS Node Group
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Sub '${ClusterName}-nodegroup'
      NodeRole: !GetAtt NodeInstanceRole.Arn
      ScalingConfig:
        DesiredSize: !Ref NodeDesiredCapacity
        MaxSize: !Ref NodeMaxSize
        MinSize: !Ref NodeMinSize
      InstanceTypes:
        - !Ref NodeInstanceType
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
    DependsOn:
      - EKSCluster
      - NodeInstanceRole

Outputs:
  ClusterName:
    Description: EKS cluster name
    Value: !Ref EKSCluster

  ClusterEndpoint:
    Description: Endpoint for EKS cluster
    Value: !GetAtt EKSCluster.Endpoint

  KubeconfigCommand:
    Description: Command to configure kubectl
    Value: !Sub 'aws eks update-kubeconfig --name ${ClusterName} --region ${AWS::Region}'